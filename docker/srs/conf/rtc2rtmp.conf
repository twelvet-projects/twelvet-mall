
listen 1935;
max_connections 1000;
daemon off;
srs_log_tank console;

http_server {
  enabled on;
  listen 8080;
  dir ./objs/nginx/html;
}

http_api {
  enabled on;
  listen 1985;
}
stats {
  network 0;
}
rtc_server {
  enabled on;
  listen 8000; # UDP port
  # @see https://ossrs.net/lts/zh-cn/docs/v4/doc/webrtc#config-candidate
  candidate $CANDIDATE;
}

vhost __defaultVhost__ {
  # ===低延时配置===
  # https://ossrs.net/lts/zh-cn/docs/v4/doc/low-latency#%E4%BD%8E%E5%BB%B6%E6%97%B6%E9%85%8D%E7%BD%AE
  tcp_nodelay on;
  min_latency on;

  play {
    gop_cache off;
    queue_length 10;
    mw_latency 100;
  }

  publish {
    mr off;
  }
  # ===低延时配置===

  hls {
    # enabled：是否开启HLS，on/off，默认off。
    enabled on;

    hls_path ./objs/nginx/html;

    # 服务器需要代理，要带/srsflv/
    # hls_m3u8_file /ddd/[app]/[stream].m3u8;
    # 本地不需要代理，就不用带/srsflv/
    # hls_m3u8_file [app]/[stream].m3u8;

    # 服务器需要代理，要带/srsflv/
    # hls_ts_file /srsflv/[app]/[stream]-[seq].ts;
    # 本地不需要代理，就不用带/srsflv/
    # hls_ts_file [app]/[stream]-[seq].ts;
    # hls_entry_prefix https://live.hsslive.cn/srsflv;
    # hls_fragment：秒，指定ts切片的最小长度。实际上ts文件的长度由以下公式决定：
    hls_fragment 5;

    # hls_dispose: 在没有流时，HLS清理的过期时间（秒），系统重启或者超过这个时间时，清理HLS的所有文件，包括m3u8和ts。默认为0，即不清理。
    hls_dispose 10;

    # hls_window：秒，指定HLS窗口大小，即m3u8中ts文件的时长之和，超过总时长后，丢弃第一个m3u8中的第一个切片，直到ts的总时长在这个配置项范围之内。即SRS保证下面的公式：
    hls_window 60;

    # https://github.com/ossrs/srs/issues/2570
    # https://github.com/ossrs/srs/issues/409#issuecomment-106801459
    # https://github.com/ossrs/srs/issues/1326
    hls_acodec an;
  }

  rtc {
    enabled on;
    # @see https://ossrs.net/lts/zh-cn/docs/v4/doc/webrtc#rtmp-to-rtc
    rtmp_to_rtc on;
    # @see https://ossrs.net/lts/zh-cn/docs/v4/doc/webrtc#rtc-to-rtmp
    rtc_to_rtmp on;
    # https://github.com/ossrs/srs/issues/2677
    # https://github.com/ossrs/srs/issues/3102
    pli_for_rtmp 0.5;
  }

  http_remux {
    enabled on;
    mount [vhost]/[app]/[stream].flv;
  }

  # TIP http回调
  http_hooks {
    enabled on;
    on_play http://twelvet-gateway:8080/live/api/srs_callback/on_play;
    on_publish http://twelvet-gateway:8080/live/api/srs_callback/on_publish;
    on_unpublish http://twelvet-gateway:8080/live/api/srs_callback/on_unpublish;
  }
}
