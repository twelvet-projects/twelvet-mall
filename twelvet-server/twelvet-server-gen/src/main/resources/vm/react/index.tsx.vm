import React, { useState, useRef } from 'react'
import TWTProTable from '@/components/TwelveT/ProTable/Index'
import type { ActionType, ProColumns } from '@ant-design/pro-components'
import { ProTable } from '@ant-design/pro-components'
import { DeleteOutlined, FundProjectionScreenOutlined, PlusOutlined, EditOutlined, CloseOutlined } from '@ant-design/icons'
import { Popconfirm, Button, message, Modal, Form, Input, Space, Divider } from 'antd'
import { FormInstance } from 'antd/lib/form'
import DictionariesSelect from '@/components/TwelveT/Dictionaries/DictionariesSelect/Index'
import DictionariesRadio from '@/components/TwelveT/Dictionaries/DictionariesRadio/Index'
import DictionariesCheckbox from '@/components/TwelveT/Dictionaries/DictionariesCheckbox/Index'
import { list${BusinessName}, get${BusinessName}, del${BusinessName}, add${BusinessName}, update${BusinessName}, export${BusinessName} } from "./service";
import { system } from '@/utils/twelvet'
import { isArray } from 'lodash'
import UploadTWT from '@/components/TwelveT/Upload'
import TWT, { proTableConfigs } from '@/setting'
import DatePickerTWT from '@/components/TwelveT/DatePicker/Index'
import moment from 'moment'
#if($table.sub)
import { EditableProTable } from '@ant-design/pro-components'
#end
/**
 * ${functionName}模块
 */
const ${BusinessName}: React.FC = () => {

    // 显示Modal
    const [modal, setModal] = useState<{ title: string, visible: boolean }>({ title: ``, visible: false })

    // 是否执行Modal数据操作中
    const [loadingModal, setLoadingModal] = useState<boolean>(false)

    const acForm = useRef<ActionType>()

    const formRef = useRef<FormInstance>()

    const [form] = Form.useForm<FormInstance>()

    const formItemLayout = {
        labelCol: {
            xs: { span: 4 },
            sm: { span: 4 },
        },
        wrapperCol: {
            xs: { span: 18 },
            sm: { span: 18 },
        },
    }

    // Form参数
    const columns: ProColumns = [
    #foreach($column in $columns)
        #set($javaField=$column.javaField)
        #set($parentheseIndex=$column.columnComment.indexOf("（"))
        #if($parentheseIndex != -1)
            #set($comment=$column.columnComment.substring(0, $parentheseIndex))
        #else
            #set($comment=$column.columnComment)
        #end
        #if($column.pk)
        #elseif($column.list && $column.htmlType == "datetime")
            {
                title: '${comment}', ellipsis: true, width: 200, valueType: "datetime", dataIndex: '${javaField}',
            },
        #elseif($column.list && "" != $javaField)
            {
                title: '${comment}', ellipsis: true, width: 200, valueType: "text", dataIndex: '${javaField}',
            },
        #end
    #end
        {
            title: '操作', fixed: 'right', width: 320, valueType: "option", dataIndex: 'operation', render: (_: string, row: { [key: string]: string }) => {
                return (
                    <>
                        <a onClick={() => refPut(row)}>
                            <Space>
                                <EditOutlined />
                                修改
                            </Space>
                        </a>

                        <Divider type="vertical" />

                        <Popconfirm
                            onConfirm={() => refRemove(row.${pkColumn.javaField})}
                            title="确定删除吗"
                        >
                            <a href='#'>
                                <Space>
                                    <CloseOutlined />
                                    删除
                                </Space>
                            </a>
                        </Popconfirm>
                    </>
                )
            }
        },
    ]

    #if($table.sub)

        const [tableForm] = Form.useForm<FormInstance>()
        const [dataSource, setDataSource] = useState<[]>([])

        const columnsEdit: ProColumns = [
            #foreach($column in $subTable.columns)
                #set($javaField=$column.javaField)
                #set($parentheseIndex=$column.columnComment.indexOf("（"))
                #if($parentheseIndex != -1)
                    #set($comment=$column.columnComment.substring(0, $parentheseIndex))
                #else
                    #set($comment=$column.columnComment)
                #end
                #if($column.pk)
                #else
                    {
                        title: '${comment}', ellipsis: true, width: 100, valueType: "text", dataIndex: '${javaField}',
                    },
                #end
            #end
            {
                title: '操作', fixed: 'right', width: 80, valueType: "option", dataIndex: 'operation'
            },
        ]
    #end


    /**
     * 新增${functionName}数据
     * @param row row
     */
    const refPost = async () => {
        setModal({ title: "新增", visible: true })
    }

    /**
     * 获取修改${functionName}信息
     * @param row row
     */
    const refPut = async (row: { [key: string]: any }) => {
        try {
            const { code, msg, data } = await get${BusinessName}(row.${pkColumn.javaField})
            if (code != 200) {
                return message.error(msg)
            }

            #if($table.sub)
                setDataSource(data.${subclassName}List)
            #end


            // 赋值表单数据
            form.setFieldsValue(data)

            // 设置Modal状态
            setModal({ title: "修改", visible: true })

        } catch (e) {
            system.error(e)
        }
    }

    /**
     * 移除${functionName}数据
     * @param row ${pkColumn.javaField}
     */
    const refRemove = async (${pkColumn.javaField}: (string | number)[] | string | undefined) => {
        try {
            if (!${pkColumn.javaField}) {
                return true
            }

            let params
            if (isArray(${pkColumn.javaField})) {
                params = ${pkColumn.javaField}.join(",")
            } else {
                params = ${pkColumn.javaField}
            }

            const { code, msg } = await del${BusinessName}(params)

            if (code !== 200) {
                return message.error(msg)
            }

            message.success(msg)

            acForm.current && acForm.current.reload()

        } catch (e) {
            system.error(e)
        }

    }

    /**
     * 取消Modal的显示
     */
    const handleCancel = () => {
        setModal({ title: "", visible: false })

        form.resetFields()

    }

    /**
     * 保存${functionName}数据
     */
    const onSave = () => {
        form
            .validateFields()
            .then(
                async (fields) => {
                    try {
                        // 开启加载中
                        setLoadingModal(true)

                        #if($table.sub)
                            fields.${subclassName}List = dataSource
                        #end


                        // ID为0则insert，否则将update
                        const { code, msg } = fields.${pkColumn.javaField} == 0 ? await add${BusinessName}(fields) : await update${BusinessName}(fields)
                        if (code != 200) {
                            return message.error(msg)
                        }

                        message.success(msg)

                        if (acForm.current) {
                            acForm.current.reload()
                        }

                        // 关闭模态框
                        handleCancel()
                    } catch (e) {
                        system.error(e)
                    } finally {
                        setLoadingModal(false)
                    }
                }).catch(e => {
            system.error(e)
        })
    }

    return (
        <>
            <ProTable
                {...proTableConfigs}
                pagination={{
                    // 是否允许每页大小更改
                    showSizeChanger: true,
                    // 每页显示条数
                    pageSize: state.pageSize,
                }}
                actionRef={acForm}
                formRef={formRef}
                rowKey="${pkColumn.javaField}"
                columns={columns}
                request={list${BusinessName}}
                rowSelection={{}}
                beforeSearchSubmit={(params) => {
                    // 分隔搜索参数
                    if (params.between) {
                        const { between } = params
                        // 移除参数
                        delete params.between

                        // 适配参数
                        params.beginTime = between[0]
                        params.endTime = between[1]
                    }
                    return params
                }}
                toolBarRender={(action, { selectedRowKeys }) => [
                    <Button type="default" onClick={refPost}>
                        <PlusOutlined />
                        新增
                    </Button>,
                    <Popconfirm
                        disabled={!(selectedRowKeys && selectedRowKeys.length > 0)}
                        onConfirm={() => refRemove(selectedRowKeys)}
                        title="是否删除选中数据"
                    >
                        <Button
                            disabled={!(selectedRowKeys && selectedRowKeys.length > 0)}
                            type="primary" danger
                        >
                            <DeleteOutlined />
                            批量删除
                        </Button>
                    </Popconfirm>,
                    <Popconfirm
                        title="是否导出数据"
                        onConfirm={() => {
                            export${BusinessName}({
                                ...formRef.current?.getFieldsValue()
                            })
                        }}
                    >
                        <Button type="default">
                            <FundProjectionScreenOutlined />
                            导出数据
                        </Button>
                    </Popconfirm>
                ]}

            />

            <Modal
                title={`${modal.title}${functionName}`}
                open={modal.visible}
                okText={`${modal.title}`}
                confirmLoading={loadingModal}
                onOk={onSave}
                onCancel={handleCancel}
                // 销毁组件，要求重新装载
                destroyOnClose
            >

                <Form
                    form={form}
                >
                    <Form.Item
                        hidden
                        {...formItemLayout}
                        label="主键"
                        name="${pkColumn.javaField}"
                        initialValue={0}
                    >
                        <Input />
                    </Form.Item>
#foreach($column in $columns)
#set($field=$column.javaField)
#if($column.insert && !$column.pk)
#if(($column.usableColumn) || (!$column.superColumn))
#if($column.isRequired)
    #set($isRequired=true)
#else
    #set($isRequired=false)
#end

#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
    #set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
    #set($comment=$column.columnComment)
#end
#set($dictType=$column.dictType)
                    <Form.Item
                        {...formItemLayout}
                        label="${comment}"
                        rules={[{ required: ${isRequired}, message: '${comment}不能为空' }]}
                        name="${field}"
                    >
                        <Input placeholder={"请输入${comment}"} />
                    </Form.Item>
#if($column.htmlType == "input")
                    <Form.Item
                        {...formItemLayout}
                        label="${comment}"
                        rules={[{ required: ${isRequired}, message: '${comment}不能为空' }]}
                        name="${field}"
                    >
                        <Input />
                    </Form.Item>
#elseif($column.htmlType == "imageUpload")
                    <Form.Item
                        {...formItemLayout}
                        label="${comment}"
                        rules={[{ required: ${isRequired}, message: '请上传${comment}' }]}
                        name="${field}"
                    >
                        <UploadTWT
                            name='file'
                            maxCount={1}
                            // 开启图片剪裁
                            imgCrop={true}
                            action={TWT.uploadUrl}
                        >
                        </UploadTWT>
                    </Form.Item>
#elseif($column.htmlType == "fileUpload")
                    <Form.Item
                        {...formItemLayout}
                        label="${comment}"
                        rules={[{ required: ${isRequired}, message: '请上传${comment}' }]}
                        name="${field}"
                    >
                        <UploadTWT
                            name='file'
                            maxCount={1}
                            listType={'picture'}
                            action={TWT.uploadUrl}
                            title={<Button> 上传文件</Button>}
                        >
                        </UploadTWT>
                    </Form.Item>
#elseif($column.htmlType == "editor")
                    <Form.Item
                        {...formItemLayout}
                        label="${comment}"
                        rules={[{ required: ${isRequired}, message: '${comment}不能为空' }]}
                        name="${field}"
                    >
                        <Upload
                            name='file'
                            headers={{
                                Authorization: `Bearer ${token.access_token}`
                            }}
                            maxCount={1}
                        >
                            <Button>上传文件</Button>
                        </Upload>
                    </Form.Item>
#elseif($column.htmlType == "select" && $dictType)
                    <Form.Item
                        {...formItemLayout}
                        label="${comment}"
                        rules={[{ required: ${isRequired}, message: '${comment}不能为空' }]}
                        name="${field}"
                    >
                        <DictionariesSelect type='${dictType}' mode={false} />
                    </Form.Item>
#elseif($column.htmlType == "checkbox" && $dictType)
                    <Form.Item
                        // 格式数组
                        getValueFromEvent={(value) => {
                            return value.join(',')
                        }}
                        {...formItemLayout}
                        label="${comment}"
                        rules={[{ required: ${isRequired}, message: '${comment}不能为空' }]}
                        name="${field}"
                    >
                        <DictionariesCheckbox type='${dictType}' />
                    </Form.Item>
#elseif($column.htmlType == "radio" && $dictType)
                    <Form.Item
                        {...formItemLayout}
                        label="${comment}"
                        name="${field}"
                    >
                        <DictionariesRadio type='${dictType}' />
                    </Form.Item>
#elseif($column.htmlType == "datetime")
                    <Form.Item
                        // 格式化时间
                        getValueFromEvent={(date) => {
                            return moment(date).valueOf()
                        }}
                        {...formItemLayout}
                        label="${comment}"
                        rules={[{ required: ${isRequired}, message: '${comment}不能为空' }]}
                        name="${field}"
                    >
                        <DatePickerTWT showTime />
                    </Form.Item>
#elseif($column.htmlType == "textarea")
                    <Form.Item
                        {...formItemLayout}
                        label="${comment}"
                        rules={[{ required: ${isRequired}, message: '${comment}不能为空' }]}
                        name="${field}"
                    >
                        <Input.TextArea />
                    </Form.Item>
#end
#end
#end
#end

                </Form>

#if($table.sub)
                <Divider >${subTable.functionName}信息</Divider>

                <EditableProTable
                    scroll={{ x: 'x-content' }}
                    columns={columnsEdit}
                    rowKey="id"
                    recordCreatorProps={{
                        newRecordType: 'dataSource',
                        record: () => ({
                            id: Date.now(),
                        }),
                    }}
                    editable={{
                        form: tableForm,
                        type: 'multiple',
                        actionRender: (row, config, defaultDoms) => {
                            return [defaultDoms.delete];
                        },
                        onValuesChange: (record, recordList: any) => {
                            setDataSource(recordList);
                        },
                    }}
                />
#end

            </Modal>
        </>
    )

}

export default ${BusinessName}